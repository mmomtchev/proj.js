{
  "name": "proj.js",
  "version": "0.0.1",
  "description": "PROJ bindings for JavaScript - with a native port for Node.js and a WASM port for the browser",
  "type": "module",
  "main": "./lib/native.cjs",
  "exports": {
    ".": {
      "types": "./lib/index.d.mts",
      "browser": "./lib/wasm.mjs",
      "default": "./lib/native.mjs"
    },
    "./native": {
      "types": "./lib/native.d.cts",
      "default": "./lib/native.cjs"
    },
    "./wasm": {
      "types": "./lib/index.d.mts",
      "default": "./lib/wasm.mjs"
    }
  },
  "scripts": {
    "test": "npm run test:nodejs && npm run test:browser",
    "test:nodejs": "npx mocha",
    "test:browser": "cd test/browser && npx webpack --mode=production && npx karma start ./karma.conf.cjs",
    "configure:native": "npx xpm run prepare --config native",
    "configure:native-xpack": "npx xpm run prepare --config native-xpack",
    "configure:wasm": "npx xpm run prepare --config wasm",
    "swig": "npx xpm run generate",
    "build:native": "npm run configure:native && npx xpm run build --config native",
    "build:native-xpack": "npm run configure:native-xpack && npx xpm run build --config native-xpack",
    "build:wasm": "npm run configure:wasm && npx xpm run build --config wasm",
    "build:webpack": "cd test/browser && npx webpack --mode=production",
    "build": "npm run build:native && npm run build:wasm",
    "lint": "clang-format -i src/*.cc src/*.h && eslint test",
    "prepare": "node -e \"console.log('\\x1b[32m', 'Run \\\"npx xpm install\\\" to install the xpm toolchains and \\\"npm run swig\\\" to generate the wrappers\\x1b[0m');\"",
    "install": "node -e \"console.log('\\x1b[32m', 'Run \\\"npm run build\\\", \\\"npm run build:native\\\" or \\\"npm run build:wasm\\\" to build', '\\x1b[0m');\"",
    "dev": "cd test/browser && npx webpack serve --mode=production",
    "gcov": "mkdir -p coverage && cd coverage && gcov -o ../build/Debug/obj.target/proj_js/build -o ../build/Debug/obj.target/proj_js/src ../src/* ../build/*",
    "lcov": "npx c8 report --reporter=text-lcov > coverage/tests.lcov"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mmomtchev/proj.js.git"
  },
  "keywords": [
    "PROJ",
    "GIS",
    "projection",
    "maps",
    "cartography",
    "WGS",
    "EPSG",
    "javascript",
    "node.js",
    "node-api",
    "napi",
    "wasm",
    "xpack"
  ],
  "author": "Momtchil Momtchev <momtchil@momtchev.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mmomtchev/proj.js/issues"
  },
  "homepage": "https://github.com/mmomtchev/proj.js#readme",
  "dependencies": {
    "@emnapi/runtime": "^1.1.1",
    "emnapi": "^1.1.1",
    "node-addon-api": "^8.1.0",
    "xpm": "^0.19.1"
  },
  "devDependencies": {
    "@types/chai": "^4.3.14",
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.12.7",
    "@types/tar": "^6.1.13",
    "@typescript-eslint/eslint-plugin": "^8.8.1",
    "@typescript-eslint/parser": "^8.8.1",
    "c8": "^9.1.0",
    "chai": "^5.1.0",
    "eslint": "^9.12.0",
    "eslint-plugin-mocha": "^10.5.0",
    "karma": "^6.4.3",
    "karma-chrome-launcher": "^3.2.0",
    "karma-mocha": "^2.0.1",
    "karma-verbose-reporter": "^0.0.8",
    "mocha": "^10.4.0",
    "ts-loader": "^9.5.1",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.4.5",
    "webpack": "^5.91.0",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^5.0.4"
  },
  "binary": {
    "napi_versions": [
      6
    ]
  },
  "xpack": {
    "minimumXpmRequired": "0.19.1",
    "dependencies": {},
    "devDependencies": {
      "@mmomtchev/python-xpack": "3.10.15-1",
      "@mmomtchev/conan-xpack": "2.7.0-1",
      "@xpack-dev-tools/cmake": "3.27.9-1.2",
      "@xpack-dev-tools/ninja-build": "1.11.1-3.1",
      "@mmomtchev/meson-xpack": "1.5.2-3"
    },
    "properties": {
      "module_name": "proj",
      "python": {
        "win32": "python",
        "linux": "python3",
        "darwin": "python3"
      },
      "commandConanBuildEnv": {
        "win32": "{{ properties.buildFolderRelativePath }}\\conanbuild.bat && ",
        "linux": ". {{ properties.buildFolderRelativePath }}/conanbuild.sh && ",
        "darwin": ". {{ properties.buildFolderRelativePath }}/conanbuild.sh && "
      },
      "commandShowEnv": {
        "win32": "set",
        "linux": "env",
        "darwin": "env"
      },
      "cwd": "{{ path.sep | path_relative: '.' }}",
      "buildFolderRelativePath": "{{ 'build' | path_join: configuration.name | to_filename | downcase }}",
      "installFolderPath": "{{ '/' | path_join: properties.cwd | path_join: 'lib' | path_join: 'binding' | path_join: properties.platformId }}",
      "commandInit": "mkdir -p swig",
      "commandGenerate": "swig-jse -javascript -napi -typescript -c++ -std=c++17 -outdir swig -exports './{{ properties.module_name }}.node' -o swig{{ path.sep }}{{ properties.module_name }}_wrap.cc -Ideps{{ path.sep }}PROJ{{ path.sep }}include src{{ path.sep }}{{ properties.module_name }}.i",
      "argsConanShared": "--build=missing --settings=build_type={{ properties.buildType | capitalize }}",
      "argsConanNative": "-pr:h=.{{ path.sep }}hadron{{ path.sep }}{{ properties.toolchain }}-{{ os.platform }}.profile -pr:b=.{{ path.sep }}hadron{{ path.sep }}{{ properties.toolchain }}-{{ os.platform }}.profile",
      "argsConanWASM": "-pr:b=default -pr:h=.{{ path.sep }}hadron{{ path.sep }}{{ properties.toolchain }}.profile",
      "commandConanDependencies": "conan install . {{ properties.argsConanShared }} -of {{ properties.buildFolderRelativePath }}",
      "commandDependenciesNative": "{{ properties.commandConanDependencies }} {{ properties.argsConanNative }}",
      "commandDependenciesWASM": "{{ properties.commandConanDependencies }} {{ properties.argsConanWASM }}",
      "commandConanLock": "conan lock create . {{ properties.argsConanShared }}",
      "commandConanLockNative": "{{ properties.commandConanLock }} {{ properties.argsConanNative }}",
      "commandConanLockWASM": "{{ properties.commandConanLock }} {{ properties.argsConanWASM }}",
      "commandPrepare": "{{ properties.commandConanBuildEnv[os.platform] }} meson setup --backend ninja --buildtype {{ properties.buildType }} {{ properties.buildFolderRelativePath }} . -Dprefix={{ properties.installFolderPath }}",
      "commandPrepareNative": "{{ properties.commandPrepare }} --native-file hadron{{ path.sep }}conan.ini --native-file {{ properties.buildFolderRelativePath }}/conan_meson_native.ini",
      "commandPrepareWASM": "{{ properties.commandPrepare }} --cross-file hadron{{ path.sep }}conan.ini --cross-file {{ properties.buildFolderRelativePath }}/conan_meson_cross.ini",
      "commandConfigure": "meson configure {{ properties.buildFolderRelativePath }}",
      "commandBuild": "{{ properties.commandConanBuildEnv[os.platform] }} meson compile -C {{ properties.buildFolderRelativePath }} -v",
      "commandInstall": "meson install -C {{ properties.buildFolderRelativePath }}",
      "commandClean": "meson compile -C {{ properties.buildFolderRelativePath }} --clean",
      "verbose": "{% if env.npm_config_loglevel %}--verbose{% endif %}",
      "scriptInstallNative": "npx prebuild-install -d {{ properties.verbose }} || ( npx xpm install && npx xpm install --config {{ properties.configNative }} && xpm run prepare --config {{ properties.configNative }} && xpm run build --config {{ properties.configNative }} )",
      "scriptInstallWASM": "npx prebuild-install --platform emscripten --arch wasm32 -d {{ properties.verbose }} || ( npx xpm install && xpm run prepare --config wasm && xpm run build --config wasm )"
    },
    "actions": {
      "generate": [
        "{{ properties.commandInit }}",
        "{{ properties.commandGenerate }}"
      ],
      "conan": "conan",
      "meson": "meson"
    },
    "buildConfigurations": {
      "native": {
        "properties": {
          "buildType": "release",
          "toolchain": "system",
          "platformId": "{{ os.platform | concat: '-' | concat: os.arch }}"
        },
        "actions": {
          "prepare": [
            "{{ properties.commandDependenciesNative }}",
            "{{ properties.commandPrepareNative }}"
          ],
          "configure": "{{ properties.commandConfigure }}",
          "build": [
            "{{ properties.commandBuild }}",
            "{{ properties.commandInstall }}"
          ],
          "clean": "{{ properties.commandClean }}"
        }
      },
      "native-xpack": {
        "inherit": [
          "native"
        ],
        "properties": {
          "buildType": "release",
          "toolchain": "clang"
        },
        "devDependencies": {
          "@xpack-dev-tools/clang": "17.0.6-1.1"
        }
      },
      "wasm": {
        "inherit": [
          "native"
        ],
        "properties": {
          "buildType": "release",
          "toolchain": "emscripten",
          "platformId": "emscripten-wasm32"
        },
        "actions": {
          "prepare": [
            "{{ properties.commandDependenciesWASM }}",
            "{{ properties.commandPrepareWASM }}"
          ]
        }
      },
      "native-debug": {
        "inherit": [
          "native"
        ],
        "properties": {
          "buildType": "debug"
        }
      },
      "native-xpack-debug": {
        "inherit": [
          "native-xpack"
        ],
        "properties": {
          "buildType": "debug"
        }
      },
      "wasm-debug": {
        "inherit": [
          "wasm"
        ],
        "properties": {
          "buildType": "debug"
        }
      }
    }
  }
}
