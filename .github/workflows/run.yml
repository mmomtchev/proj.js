name: 'CI'
on: [pull_request, push]

jobs:
  swig:
    runs-on: ubuntu-latest
    name: Generate the SWIG wrappers

    strategy:
      fail-fast: false

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - uses: mmomtchev/setup-swig@main
      with:
        branch: jse
        version: main
        cache: false
        
    - name: Verify SWIG
      run: swig-jse -version

    - name: Run SWIG to generate the wrappers
      run: npm run swig

    - name: Upload SWIG-generated wrappers
      uses: actions/upload-artifact@v4
      with:
        name: swig-generated
        path: |
          swig/*

  
  build-native:
    runs-on: ${{ matrix.platform }}
    name: Build native ${{ matrix.platform }}
    needs: swig

    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
    - name: Cache conan artifacts
      id: conan-artifacts
      uses: actions/cache@v4
      with:
        path: ~/.conan2
        key: ${{ runner.os }}-conan

    - name: Setup Visual Studio (Windows)
      uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'

    - name: Download the SWIG-generated wrappers
      uses: actions/download-artifact@v4
      with:
        name: swig-generated
        path: swig
        
    - name: Install dependencies
      run: |
        npm install
        npx xpm install

    - name: Horrible kludge for https://github.com/xpack-dev-tools/cmake-xpack/issues/8
      run: del node_modules\.bin\rc
      if: runner.os == 'Windows'

    - name: Build the native version
      run: npm run build:native
    
    - name: Upload native artifact ${{ matrix.platform }}
      uses: actions/upload-artifact@v4
      with:
        name: native-${{ matrix.platform }}
        path: lib/binding/*


  build-wasm:
    runs-on: ubuntu-latest
    name: Build WASM
    needs: swig

    strategy:
      fail-fast: false
      matrix:
        inline_projdb: [true, false]

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
    - name: Setup emscripten
      uses: mymindstorm/setup-emsdk@v14
      with:
        version: 3.1.53
    - name: Cache conan artifacts
      id: conan-artifacts
      uses: actions/cache@v4
      with:
        path: ~/.conan2
        key: wasm-conan-${{ matrix.inline_projdb }}

    - name: Download the SWIG-generated wrappers
      uses: actions/download-artifact@v4
      with:
        name: swig-generated
        path: swig

    - name: Install dependencies
      run: |
        npm install
        npx xpm install

    - name: Build the WASM version
      run: npm run build:wasm
      env:
        npm_config_inline_projdb: ${{ matrix.inline_projdb }}
    
    - name: Upload WASM artifact
      uses: actions/upload-artifact@v4
      with:
        name: wasm-inline-${{ matrix.inline_projdb }}
        path: lib/binding/*


  build-asan:
    runs-on: ubuntu-latest
    name: Build ASAN instrumented version
    needs: swig

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
    - name: Cache conan artifacts
      id: conan-artifacts
      uses: actions/cache@v4
      with:
        path: ~/.conan2
        key: asan-conan

    - name: Download the SWIG-generated wrappers
      uses: actions/download-artifact@v4
      with:
        name: swig-generated
        path: swig
        
    - name: Install dependencies
      run: |
        npm install
        npx xpm install

    - name: Build the native version
      run: |
        npx xpm run prepare --config native-debug
        npx xpm run configure --config native-debug -- -Db_sanitize=address
        npx xpm run build --config native-debug

    - name: Upload native artifact (ASAN instrumented)
      uses: actions/upload-artifact@v4
      with:
        name: native-asan
        path: lib/binding/*


  build-codecov:
    runs-on: ubuntu-latest
    name: Build code coverage instrumented version
    needs: swig

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
    - name: Cache conan artifacts
      id: conan-artifacts
      uses: actions/cache@v4
      with:
        path: ~/.conan2
        key: codecov-conan

    - name: Download the SWIG-generated wrappers
      uses: actions/download-artifact@v4
      with:
        name: swig-generated
        path: swig
        
    - name: Install dependencies
      run: |
        npm install
        npx xpm install

    - name: Build the native version
      run: |
        npm run configure:native
        npx xpm run configure --config native -- -Db_coverage=true
        npm run build:native

    - name: Upload native artifact (code coverage instrumented)
      uses: actions/upload-artifact@v4
      with:
        name: native-codecov
        path: lib/binding/*


  test:
    runs-on: ${{ matrix.platform }}
    name: Test ${{ matrix.platform }}
    needs: [ build-wasm, build-native ]

    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        inline_projdb: [true, false]

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Download the native artifact ${{ matrix.platform }}
      uses: actions/download-artifact@v4
      with:
        name: native-${{ matrix.platform }}
        path: lib/binding

    - name: Download the WASM artifact
      uses: actions/download-artifact@v4
      with:
        name: wasm-inline-${{ matrix.inline_projdb }}
        path: lib/binding

    - name: Install dependencies
      run: npm install
    
    - name: Run the Node.js tests
      run: npm run test:nodejs

    - name: Run the browser tests
      uses: coactions/setup-xvfb@v1
      with:
        run: npm run test:browser

    - name: Test building the webpack project
      run: npm run build:webpack


  asan:
    runs-on: ubuntu-latest
    name: Run asan
    needs: [ build-asan, build-wasm ]

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Download the WASM artifact
      uses: actions/download-artifact@v4
      with:
        name: wasm-inline-true
        path: lib/binding

    - name: Download the ASAN instrumented artifact
      uses: actions/download-artifact@v4
      with:
        name: native-asan
        path: lib/binding

    - name: Install dependencies
      run: |
        npm install
        npx xpm install
    
    - name: Run the Node.js tests
      run: npm run test:nodejs
      env:
        LD_PRELOAD: /usr/lib/x86_64-linux-gnu/libasan.so.6
        LSAN_OPTIONS: suppressions=${{ github.workspace }}/test/napi-leaks-suppression.txt


  codecov:
    runs-on: ubuntu-latest
    name: Run code coverage
    needs: [ build-codecov, build-wasm ]

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Download the WASM artifact
      uses: actions/download-artifact@v4
      with:
        name: wasm-inline-true
        path: lib/binding

    - name: Download the code coverage artifact
      uses: actions/download-artifact@v4
      with:
        name: native-codecov
        path: lib/binding

    - name: Install dependencies
      run: |
        npm install
        npx xpm install
    
    - name: Run the Node.js tests
      run: npx c8 npm run test:nodejs

    - name: Collect code coverage
      run: |
        npm run gcov
        npm run lcov

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: coverage
        slug: mmomtchev/proj.js
